translation
generateCodeStringForCogitDotC
	"Generate a skeletal cogit.c that includes the relevant cogitFOO.c
	 for the appropriate subclasses of CogAbstractInstruction.
	 self generateCodeStringForCogitDotC"
	 
	| string insertPosition abis defaultDef |
	abis := OrderedCollection new.
	string := String streamContents:
		[:s|
		 s nextPutAll: '/* Automatically generated by\	' withCRs.
		 s nextPutAll: (CCodeGenerator monticelloDescriptionFor: self).
		 s cr; nextPutAll: ' */'.
		 s cr; cr; nextPut: $#.
		 insertPosition := s position.
		 self translateableInstructionSubclassesAndInstalledOptionsDo:
			[:class | | abi |
			 s nextPutAll: 'if '.
			 (abi := initializationOptions at: #ABI ifAbsent: []) ifNotNil:
				[s nextPutAll: (abis addLast: abi, 'ABI'); nextPutAll: ' && ('].
			 class identifyingPredefinedMacros
				do: [:predefinedMacro| s nextPutAll: 'defined('; nextPutAll: predefinedMacro; nextPut: $)]
				separatedBy: [s nextPutAll: ' || '].
			 abi ifNotNil: [s nextPut: $)].
			 s cr; cr; nextPutAll: '#	include "'; nextPutAll: class moduleName; nextPutAll: '.c"'.
			 s cr; cr; nextPutAll: '#el'].
		 s nextPutAll: 'se'.
		 #(	'As yet no Cogit implementation appears to exist for your platform.'
			'Consider implementing it, starting by adding a subclass of CogAbstractInstruction.') do:
			[:msg| s cr; nextPutAll: '#	error '; nextPutAll: msg].
		 s cr; nextPutAll: '#endif'; cr].
	abis isEmpty ifTrue:
		[^string].
	defaultDef := String streamContents:
		[:s|
		s nextPutAll: '#if !'.
		abis do: [:abi| s nextPutAll: abi] separatedBy: [s nextPutAll: ' && !'].
		s cr; nextPutAll: '# define '; nextPutAll: abis first; nextPutAll: ' 1'; cr.
		s nextPutAll: '#endif'; cr; cr].
	^string copyReplaceFrom: insertPosition to: insertPosition - 1 with: defaultDef